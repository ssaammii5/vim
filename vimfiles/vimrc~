source $VIMRUNTIME/vimrc_example.vim

au GUIEnter * simalt ~x
set hls
set is
set cb=unnamed
set gfn=Fixedsys:h16
set ts=4
set sw=4
set si

"cd C:\Users\sami\Music\Code
cd ~/$HOME/Music/Code

autocmd GUIEnter * set vb t_vb=
set belloff=all

inoremap { {}<Left>
inoremap {<CR> {<CR>}<Esc>O
inoremap {{ {
inoremap {} {}

"Custom Keymap
inoremap <A-j> <Esc>
nnoremap <C-A> ggVG


function! ToggleExplorer()
    if exists("g:explorer_opened") && g:explorer_opened
        bd
        let g:explorer_opened = 0
    else
        Explore
        let g:explorer_opened = 1
    endif
endfunction

nnoremap <C-b> :call ToggleExplorer()<CR>



autocmd filetype cpp nnoremap <A-l> :w <bar> !g++ -std=c++17 % -o %:r -Wl,--stack,268435456<CR>
autocmd filetype cpp nnoremap <A-k> :!%:r<CR>


autocmd filetype cpp nnoremap <C-C> :s/^\(\s*\)/\1\/\/<CR> :s/^\(\s*\)\/\/\/\//\1<CR> $


set nu
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set rnu
    autocmd BufLeave,FocusLost,InsertEnter * set nornu
augroup END

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in	
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction




" Define a mapping for loading a C++ template with Alt+d
nnoremap <A-d> :call LoadCppTemplate()<CR>

" Function to load C++ template
function! LoadCppTemplate()
    " Clear the current buffer
    %delete _

    " Insert the C++ template
    put ='#include<bits/stdc++.h>' | put ='using namespace std;' | put ='' | put ='int main(void){' | put ='\t// Your code here' | put ='\treturn 0;' | put ='}'

    " Move the cursor to a convenient position
    normal! 3k
endfunction

